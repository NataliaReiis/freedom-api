// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  email          String      @unique
  name           String
  password       String
  tel            String?
  marital_status String
  cpf            String
  age            Int
  sex            String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  imageDoc       String
  imageSelf      String
  imageDocSelf   String
  comments       Comment[]
  Complaint      Complaint[]
  postBlog       PostBlog[]

  @@map("users")
}

model Complaint {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  typeComplaint  TypeComplaint
  nivelComplaint NivelComplaint
  imageComplaint String
  description    String
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  locationId     String         @unique
  location       Location       @relation(fields: [locationId], references: [id])
}

model Location {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  latitude  Float
  longitude Float
  Complaint Complaint?
}

model PostBlog {
  id          String    @id @default(uuid())
  description String
  imagePost   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  comment     Comment[]
}

model Comment {
  id           String    @id @default(uuid())
  description  String
  imageComment String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String 
  postBlog     PostBlog @relation(fields: [postBlogId], references: [id])
  postBlogId   String
}

enum TypeComplaint {
  BRIFERY // CHANTAGEM
  HUMILIATION // HUMILHAÇÃO
  AGGRESSION // AGRESSÃO
  PERSECUTION // PERSEGUIÇÃO
  PATRIMONIAL_VIOLATION // VIOLAÇÃO PATRIMONIAL
  VERBAL_HARASSMENT //ASSÉDIO VERBAL
  PSUCHOLOGICAL_HARASSMENT // ASSÉDIO PSICOLÓGICO
  PHYSICAL_HARASSMENT // ASSÉDIO FÍSICO
  OTHERS // OUTROS
}

enum NivelComplaint {
  LIGHT // LEVE
  MEDIUM // MÉDIO
  SEVERE // GRAVE
}
